package in.sarangal.lib.spantastic;

import android.content.Context;
import android.graphics.Color;
import android.text.SpannableString;
import android.text.TextPaint;
import android.text.method.LinkMovementMethod;
import android.text.style.ClickableSpan;

import android.view.View;
import android.widget.TextView;

import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 *
 * Written By: Sarangal
 *
 * */

public class Spantastic {

    /**
     * Method Params:
     * @param context Instance or Reference
     * @param textView TextView on which spannable text will be applied
     *
     * @param fullString Complete string value from which span(s) will be found.
     *
     * @param spanString Single string which will be convert to spanable.
     *
     * @param colorId The desired resource identifier, as generated by the aapt
     *                tool. This integer encodes the package, type, and resource
     *                entry. The value 0 is an invalid identifier.
     *
     * @param spannableCallBack Interface reference to get click callback of specific
     *                          span click.
     *
     * @param showUnderline true: underline will be display under span text,
     *                      false: no underline
     *
     * @param object May object any object which will be return on span click via
                     spannableCallBack interface.
     * */
    public static void setSpannable(Context context, TextView textView, String fullString, String spanString, int colorId, final SpannableCallBack spannableCallBack, boolean showUnderline, Object object) {
        List<String> spanStringList = new ArrayList<>();
        spanStringList.add(spanString);
        setSpannable(context, textView, fullString, spanStringList, colorId, spannableCallBack, showUnderline, object);
    }

    private static void with(Context context) {
    }

    /**
     * Method Params:
     * @param context Instance or Reference
     * @param textView TextView on which spannable text will be applied
     *
     * @param fullString Complete string value from which span(s) will be found.
     *
     * @param spanStringList List of strings which will be convert to spanable.
     *
     * @param colorId The desired resource identifier, as generated by the aapt
     *                tool. This integer encodes the package, type, and resource
     *                entry. The value 0 is an invalid identifier.
     *
     * @param spannableCallBack Interface reference to get click callback of specific
     *                          span click.
     *
     * @param showUnderline true: underline will be display under span text,
     *                      false: no underline
     *
     * @param object May object any object which will be return on span click via
     *               spannableCallBack interface.
     * */

    public static void setSpannable(final Context context, TextView textView, String fullString, List<String> spanStringList, final int colorId, final SpannableCallBack spannableCallBack, final boolean showUnderline, final Object object) {
        SpannableString spString = new SpannableString(fullString);
        for(final String spanString : spanStringList){
            Pattern pattern = Pattern.compile(spanString);
            Matcher matcher = pattern.matcher(fullString);
            while (matcher.find()){
                int start = matcher.start();
                int end = matcher.end();
                ClickableSpan clickSpan = new ClickableSpan() {
                    @Override
                    public void onClick(@NonNull View view) {
                        if(spannableCallBack!=null){
                            spannableCallBack.onSpanClick(spanString, object);
                        }
                    }

                    @Override
                    public void updateDrawState(@NonNull TextPaint textPaint) {
                        super.updateDrawState(textPaint);
                        textPaint.setUnderlineText(showUnderline);
                        textPaint.setColor(ContextCompat.getColor(context, colorId));
                    }
                };
                spString.setSpan(clickSpan, start, end, 0);
                textView.setText(spString);
                textView.setMovementMethod(LinkMovementMethod.getInstance());
                textView.setHighlightColor(Color.TRANSPARENT);
            }
        }
    }

    /**
     *
     *  Interface for Spannable Click CallBack
     *
     *  */
    public interface SpannableCallBack {
        void onSpanClick(String spanString, Object... object);
    }

}
