package in.sarangal.lib.spantastic;

import android.content.Context;
import android.graphics.Color;
import android.graphics.Typeface;
import android.text.SpannableString;
import android.text.TextPaint;
import android.text.method.LinkMovementMethod;
import android.text.style.ClickableSpan;

import android.view.View;
import android.widget.TextView;

import androidx.annotation.IdRes;
import androidx.annotation.NonNull;
import androidx.core.content.ContextCompat;

import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * Written By: Sarangal
 */

public class Spantastic {

    private Context mContext;
    private TextView mTextView;
    private String mFullString;
    private Integer mColorID;
    private SpannableCallBack mSpannableCallBack;
    private List<SpanModel> mSpanModelList;
    private Typeface mTypeface;
    private boolean showUnderline;

    public Spantastic(SpantasticBuilder spantasticBuilder) {
        mContext = spantasticBuilder.mContext;
        mTextView = spantasticBuilder.mTextView;
        mFullString = spantasticBuilder.mFullString;
        mColorID = spantasticBuilder.mColorID;
        mSpannableCallBack = spantasticBuilder.mSpannableCallBack;
        showUnderline = spantasticBuilder.showUnderline;
        mSpanModelList = spantasticBuilder.mSpanModelList;
        mTypeface = spantasticBuilder.mTypeface;
        setSpannable();
    }

    private void setSpannable() {
        SpannableString spString = new SpannableString(mFullString);
        if (mContext != null && mTextView != null && mFullString != null && !mFullString.isEmpty() && mSpanModelList != null && !mSpanModelList.isEmpty()) {
            for (final SpanModel spanModel : mSpanModelList) {
                if (spanModel.getSpanString() != null && !spanModel.getSpanString().isEmpty()) {
                    Pattern pattern = Pattern.compile(spanModel.getSpanString() != null ? spanModel.getSpanString() : "");
                    Matcher matcher = pattern.matcher(mFullString);
                    while (matcher.find()) {
                        int start = matcher.start();
                        int end = matcher.end();
                        ClickableSpan clickSpan = new ClickableSpan() {
                            @Override
                            public void onClick(@NonNull View view) {
                                if (mSpannableCallBack != null) {
                                    mSpannableCallBack.onSpanClick(spanModel.getCallbackKey() != null ? spanModel.getCallbackKey() : spanModel.getSpanString());
                                }
                            }

                            @Override
                            public void updateDrawState(@NonNull TextPaint textPaint) {
                                super.updateDrawState(textPaint);
                                textPaint.setUnderlineText(spanModel.getShowUnderline() != null ? spanModel.getShowUnderline() : showUnderline);
                                try {
                                    if (spanModel.getColorId() != null || mColorID != null)
                                        textPaint.setColor(ContextCompat.getColor(mContext, spanModel.getColorId() != null ? spanModel.getColorId() : mColorID));
                                } catch (Exception ignored) {
                                }
                            }
                        };
                        spString.setSpan(clickSpan, start, end, 0);
                    }
                    mTextView.setText(spString);
                }
            }
        }
    }

    /**
     * Method Params:
     *
     * @param context           Instance or Reference
     * @param textView          TextView on which spannable text will be applied
     * @param fullString        Complete string value from which span(s) will be found.
     * @param spanString        Single string which will be convert to spanable.
     * @param colorId           The desired resource identifier, as generated by the aapt
     *                          tool. This integer encodes the package, type, and resource
     *                          entry. The value 0 is an invalid identifier.
     * @param spannableCallBack Interface reference to get click callback of specific
     *                          span click.
     * @param showUnderline     true: underline will be display under span text,
     *                          false: no underline
     * @param object            May object any object which will be return on span click via
     *                          spannableCallBack interface.
     */
    public static void setSpannable(Context context, TextView textView, String fullString, String spanString, int colorId, final SpannableCallBack spannableCallBack, boolean showUnderline, Object object) {
        List<String> spanStringList = new ArrayList<>();
        spanStringList.add(spanString);
        setSpannable(context, textView, fullString, spanStringList, colorId, spannableCallBack, showUnderline, object);
    }

    /**
     * Method Params:
     *
     * @param context           Instance or Reference
     * @param textView          TextView on which spannable text will be applied
     * @param fullString        Complete string value from which span(s) will be found.
     * @param spanStringList    List of strings which will be convert to spanable.
     * @param colorId           The desired resource identifier, as generated by the aapt
     *                          tool. This integer encodes the package, type, and resource
     *                          entry. The value 0 is an invalid identifier.
     * @param spannableCallBack Interface reference to get click callback of specific
     *                          span click.
     * @param showUnderline     true: underline will be display under span text,
     *                          false: no underline
     * @param object            May object any object which will be return on span click via
     *                          spannableCallBack interface.
     */

    public static void setSpannable(final Context context, TextView textView, String fullString, List<String> spanStringList, final int colorId, final SpannableCallBack spannableCallBack, final boolean showUnderline, final Object object) {
        SpannableString spString = new SpannableString(fullString);
        for (final String spanString : spanStringList) {
            Pattern pattern = Pattern.compile(spanString);
            Matcher matcher = pattern.matcher(fullString);
            while (matcher.find()) {
                int start = matcher.start();
                int end = matcher.end();
                ClickableSpan clickSpan = new ClickableSpan() {
                    @Override
                    public void onClick(@NonNull View view) {
                        if (spannableCallBack != null) {
                            spannableCallBack.onSpanClick(spanString, object);
                        }
                    }

                    @Override
                    public void updateDrawState(@NonNull TextPaint textPaint) {
                        super.updateDrawState(textPaint);
                        textPaint.setUnderlineText(showUnderline);
                        textPaint.setColor(ContextCompat.getColor(context, colorId));
                    }
                };
                spString.setSpan(clickSpan, start, end, 0);
                textView.setText(spString);
                textView.setMovementMethod(LinkMovementMethod.getInstance());
                textView.setHighlightColor(Color.TRANSPARENT);
            }
        }
    }

    /**
     * Interface for Spannable Click CallBack
     */
    public interface SpannableCallBack {
        void onSpanClick(String spanString, Object... object);
    }

    public static class SpantasticBuilder {

        private Context mContext;
        private TextView mTextView;
        private String mFullString;
        private Integer mColorID;
        private SpannableCallBack mSpannableCallBack;
        private List<SpanModel> mSpanModelList;
        private Typeface mTypeface;
        private boolean showUnderline;

        public SpantasticBuilder(@NonNull Context mContext, @NonNull TextView mTextView, @NonNull String mFullString) {
            this.mContext = mContext;
            this.mTextView = mTextView;
            this.mFullString = mFullString;
        }

        public SpantasticBuilder setSpan(@NonNull String singleString) {
            List<String> spanList = new ArrayList<>();
            if (singleString != null && !singleString.isEmpty())
                spanList.add(singleString);
            return setSpanList(spanList);
        }

        public SpantasticBuilder setSpanList(@NonNull List<String> spanList) {
            List<SpanModel> spanModelList = new ArrayList<>();
            if (spanList != null && !spanList.isEmpty())
                for (String spanString : spanList)
                    if (spanString != null && !spanString.isEmpty())
                        spanModelList.add(new SpanModel(spanString, null, spanString, null, null));
            return setCustomSpanModel(spanModelList);
        }

        public SpantasticBuilder setSpanColor(@IdRes int colorId) {
            mColorID = colorId;
            return this;
        }

        public SpantasticBuilder showUnderline(boolean showUnderline) {
            this.showUnderline = showUnderline;
            return this;
        }

        public SpantasticBuilder setClickCallback(@NonNull SpannableCallBack spannableCallBack) {
            mSpannableCallBack = spannableCallBack;
            return this;
        }

        public SpantasticBuilder setTypeface(@NonNull Typeface typeface) {
            mTypeface = typeface;
            return this;
        }

        public SpantasticBuilder setCustomSpanModel(@NonNull List<SpanModel> spanModelList) {
            if (spanModelList != null) {
                mSpanModelList = spanModelList;
            } else {
                mSpanModelList = new ArrayList<>();
            }

            return this;
        }

        public Spantastic apply() {
            return new Spantastic(this);
        }
    }


}
